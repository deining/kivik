// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

package kivik

import (
	"errors"
	"fmt"
	"net/http"
	"strings"
)

type err int

var (
	_ error       = err(0)
	_ statusCoder = err(0)
)

const (
	// ErrClientClosed is returned by any client operations after [Client.Close]
	// has been called.
	ErrClientClosed err = iota
	// ErrDatabaseClosed is returned by any database operations after [DB.Close]
	// has been called.
	ErrDatabaseClosed
)

const (
	errClientClosed   = "client closed"
	errDatabaseClosed = "database closed"
)

func (e err) Error() string {
	switch e {
	case ErrClientClosed:
		return errClientClosed
	case ErrDatabaseClosed:
		return errDatabaseClosed
	}
	return "unknown error"
}

func (e err) HTTPStatus() int {
	switch e {
	case ErrClientClosed, ErrDatabaseClosed:
		return http.StatusServiceUnavailable
	}
	return http.StatusInternalServerError
}

// Error represents an error returned by Kivik.
//
// This type definition is not guaranteed to remain stable, or even exported.
// When examining errors programatically, you should rely instead on the
// HTTPStatus() function in this package, rather than on directly observing
// the fields of this type.
type Error struct {
	// Status is the HTTP status code associated with this error. Normally
	// this is the actual HTTP status returned by the server, but in some cases
	// it may be generated by Kivik directly.
	Status int

	// Message is the error message.
	Message string

	// Err is the originating error, if any.
	Err error
}

var (
	_ error       = &Error{}
	_ statusCoder = &Error{}
)

func (e *Error) Error() string {
	if e.Err == nil {
		return e.msg()
	}
	if e.Message == "" {
		return e.Err.Error()
	}
	return e.Message + ": " + e.Err.Error()
}

// HTTPStatus returns the HTTP status code associated with the error, or 500
// (internal server error), if none.
func (e *Error) HTTPStatus() int {
	if e.Status == 0 {
		return http.StatusInternalServerError
	}
	return e.Status
}

// Unwrap satisfies the errors.Wrapper interface.
func (e *Error) Unwrap() error {
	return e.Err
}

// Format implements fmt.Formatter
func (e *Error) Format(f fmt.State, c rune) {
	const partsLen = 3
	parts := make([]string, 0, partsLen)
	if e.Message != "" {
		parts = append(parts, e.Message)
	}
	if c == 'v' {
		if f.Flag('+') {
			parts = append(parts, fmt.Sprintf("%d / %s", e.Status, http.StatusText(e.Status)))
		}
	}
	if e.Err != nil {
		parts = append(parts, e.Err.Error())
	}
	_, _ = fmt.Fprint(f, strings.Join(parts, ": "))
}

func (e *Error) msg() string {
	switch e.Message {
	case "":
		return http.StatusText(e.HTTPStatus())
	default:
		return e.Message
	}
}

type statusCoder interface {
	HTTPStatus() int
}

// HTTPStatus returns the HTTP status code embedded in the error, or 500
// (internal server error), if there was no specified status code.  If err is
// nil, HTTPStatus returns 0. This provides a convenient way to determine the
// precise nature of a Kivik-returned error.
//
// For example, to panic for all but NotFound errors:
//
//	err := db.Get(context.TODO(), "docID").ScanDoc(&doc)
//	if kivik.HTTPStatus(err) == http.StatusNotFound {
//	    return
//	}
//	if err != nil {
//	    panic(err)
//	}
//
// This method uses the statusCoder interface, which is not exported by this
// package, but is considered part of the stable public API.  Driver
// implementations are expected to return errors which conform to this
// interface.
//
//	type statusCoder interface {
//	    HTTPStatus() int
//	}
func HTTPStatus(err error) int {
	if err == nil {
		return 0
	}
	var coder statusCoder
	for {
		if errors.As(err, &coder) {
			return coder.HTTPStatus()
		}
		if uw := errors.Unwrap(err); uw != nil {
			err = uw
			continue
		}
		return http.StatusInternalServerError
	}
}
